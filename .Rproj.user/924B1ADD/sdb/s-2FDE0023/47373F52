{
    "collab_server" : "",
    "contents" : "# This is where all functions related to model fitting should appear\n\n#' Fit smooth-in-time parametric hazard functions.\n#'\n#' Miettinen and Hanley (2009) explained how case-base sampling can be used to\n#' estimate smooth-in-time parametric hazard functions. The idea is to sample\n#' person-moments, which may or may not correspond to an event, and then fit the\n#' hazard using logistic regression.\n#'\n#' The object \\code{data} should either be the output of the function\n#' \\link{\\code{sampleCaseBase}} or the source dataset on which case-base\n#' sampling will be performed. In the latter case, it is assumed that\n#' \\code{data} contains the two columns corresponding to the supplied time and\n#' event variables. If either the \\code{time} or \\code{event} argument is\n#' missing, the function looks for columns named \\code{\"time\"}, \\code{\"event\"},\n#' or \\code{\"status\"}.\n#'\n#' @param formula an object of class \"formula\" (or one that can be coerced to\n#'   that class): a symbolic description of the model to be fitted. The details\n#'   of model specification are given under Details.\n#' @param data a data frame, list or environment containing the variables in the\n#'   model. If not found in data, the variables are taken from\n#'   \\code{environment(formula)}, typically the environment from which\n#'   \\code{fitSmoothHazard} is called.\n#' @param time a character string giving the name of the time variable. See\n#'   Details.\n#' @param event a character string giving the name of the event variable. See\n#'   Details.\n#' @param link A character string, which gives the specification for the model\n#'   link function. Default is the \\code{logit} link.\n#' @param ... Additional parameters passed to \\code{\\link{sampleCaseBase}}. If\n#'   \\code{data} inherits from the class \\code{cbData}, then these parameters\n#'   are ignored.\n#' @return An object of class \\code{caseBase}, which inherits from the classes\n#'   \\code{glm} and \\code{lm}. As such, functions like \\code{summary} and\n#'   \\code{coefficients} give familiar results.\n#' @export\nfitSmoothHazard <- function(formula, data, time, event, link = \"logit\", ...) {\n\n    # Call sampleCaseBase\n    if (!inherits(data, \"cbData\")) {\n        originalData <- as.data.frame(data)\n        data <- sampleCaseBase(originalData, ...)\n        if (length(list(...)) != 2) {\n            warning(\"sampleCaseBase is using some default values; see documentation for more details.\")\n        }\n    } else {\n        originalData <- NULL\n    }\n\n    # Update formula to add offset term\n    formula <- update(formula, ~ . + offset(offset))\n    model <- glm(formula, data = data, family = binomial(link=link))\n    model$originalData <- originalData\n\n    class(model) <- c(\"caseBase\", class(model))\n\n    return(model)\n}\n",
    "created" : 1452465955710.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1795000583",
    "id" : "47373F52",
    "lastKnownWriteTime" : 1452461920,
    "last_content_update" : 1452461920,
    "path" : "~/git_repositories/casebase/R/fitting.R",
    "project_path" : "R/fitting.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}