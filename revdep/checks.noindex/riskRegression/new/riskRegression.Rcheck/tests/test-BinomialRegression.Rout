
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(riskRegression)
riskRegression version 2020.12.08
> library(timereg)
Loading required package: survival
> library(prodlim)
> library(survival)
> context("Binomial regression")
> data(Melanoma)
> # {{{ "Absolute risk regression"
> test_that("Absolute risk regression",{
+     set.seed(17)
+     d <- sampleData(300,outcome="competing.risks")
+     f1 <- ARR(Hist(time,event)~X1+X2+strata(X6),data=d,cause=1)
+     f2 <- timereg::comp.risk(Event(time,event)~ const(X1)+const(X2)+X6,data=d,cause=1,model="rcif")
+     f3 <- timereg::comp.risk(Event(time,event)~ const(X1)+const(X2)+X6,data=d,cause=1,model="rcif2")
+     f4 <- ARR(Hist(time,event)~X1+X2+strata(X8),data=d,cause=1)    
+     f5 <- timereg::comp.risk(Event(time,event)~ const(X1)+const(X2)+X8,data=d,cause=1,model="rcif")
+     f6 <- timereg::comp.risk(Event(time,event)~ const(X1)+const(X2)+X8,data=d,cause=1,model="rcif2")
+     expect_equal(as.numeric(f1$timeConstantEffects$coef),c(f3$gamma))
+     expect_equal(as.numeric(f4$timeConstantEffects$coef),c(f6$gamma))
+     d[,X4:=factor(X4)]
+     system.time(A <- ARR(Hist(time,event)~X1+X3+X4,data=d,cause=1))
+     ## system.time(B <- timereg::comp.risk(Event(time,event)~ const(factor(X1))+ const(factor(X3)),data=d,cause=1,model="rcif"))
+     system.time(B <- timereg::comp.risk(Event(time,event)~ const(X1)+ const(X3)+const(X4),data=d,cause=1,model="rcif2"))
+     ## head(A$timeVaryingEffects$coef)
+     ## head(B$cum)
+     expect_equal(as.numeric(A$timeConstantEffects$coef),c(B$gamma))    
+ })
Test passed ðŸ¥‡
> 
> # }}}
> # {{{ "Logistic risk regression"
> test_that("Logistic risk regression",{
+     set.seed(17)
+     d <- prodlim::SimCompRisk(100)
+     a <- LRR(Hist(time,event)~X1+X2,data=d,cause=1)
+     b <- timereg::comp.risk(Event(time,event)~ const(X1)+const(X2),data=d,cause=1,model="logistic2")
+     expect_equal(as.numeric(a$timeConstantEffects$coef),c(b$gamma))
+     A <- LRR(Hist(time,event)~X1+strata(X2),data=d,cause=1)
+     B <- timereg::comp.risk(Event(time,event)~ const(X1)+X2,data=d,cause=1,model="logistic2")
+     ## head(A$timeVaryingEffects$coef)
+     ## head(B$cum)
+     expect_equal(as.numeric(A$timeConstantEffects$coef),c(B$gamma))    
+ })
Test passed ðŸ¥³
> 
> # }}}
> # {{{ "Censoring model"
> test_that("Censoring model",{
+     expect_success(ARR(Hist(time,status)~thick+strata(invasion)+epicel,data=Melanoma,cens.model="cox",cause=1))
+     expect_success(ARR(Hist(time,status)~thick+strata(invasion)+epicel,data=Melanoma,cens.model="cox",cens.formula=~thick+strat(invasion)+epicel,cause=1))
+     expect_success(ARR(Hist(time,status)~sex+strata(invasion)+epicel,data=Melanoma,cens.model="cox",cens.formula=~logthick+age,cause=1))
+ })
â”€â”€ Failure (???): Censoring model â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
no expectation used.

â”€â”€ Failure (???): Censoring model â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
no expectation used.

â”€â”€ Failure (???): Censoring model â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
no expectation used.

> # }}}
> 
> proc.time()
   user  system elapsed 
  4.925   0.401   5.590 
