source("https://bioconductor.org/biocLite.R")
biocLite("RedeR")
library (RedeR)
rdp <- RedPort ()
g1 <- graph.lattice(c(5,5,5))
addGraph( rdp, g1, layout.kamada.kawai(g1) )
g2 <- getGraph(rdp)
resetd(rdp)
g3 <- barabasi.game(10)
g4 <- barabasi.game(10)
g3
V(g3)$name<-paste("sn",1:10,sep="")
V(g4)$name<-paste("sm",1:10,sep="")
addGraph(rdp, g3, isNest =TRUE, gcoord=c(25,25), gscale=50)
addGraph(rdp, g4, isNest =TRUE, gcoord=c(75,75), gscale=50)
rdp <- RedPort ()
calld(rdp)
g1 <- graph.lattice(c(5,5,5))
addGraph( rdp, g1, layout.kamada.kawai(g1) )
g2 <- getGraph(rdp)
resetd(rdp)
g3 <- barabasi.game(10)
g4 <- barabasi.game(10)
V(g3)$name<-paste("sn",1:10,sep="")
V(g4)$name<-paste("sm",1:10,sep="")
addGraph(rdp, g3, isNest =TRUE, gcoord=c(25,25), gscale=50)
addGraph(rdp, g4, isNest =TRUE, gcoord=c(75,75), gscale=50)
selectNodes(rdp,"N0")
g5 <- getGraph(rdp, status= "selected")
resetd(rdp)
g6 <- barabasi.game(500)
addGraph(rdp, g6, zoom=20)
relax(rdp,p2=400,p5=30,ps=T)
data(ER.limma)
data(hs.inter)
dt <- ER.limma
gi <- hs.inter
gt3  <- subg(g=gi, dat=dt[dt$degenes.t3!=0,], refcol=1)
gt3  <- att.setv(g=gt3, from="Symbol", to="nodeAlias")
gt3  <- att.setv(g=gt3, from="logFC.t3", to="nodeColor", breaks=seq(-2,2,0.4), pal=2)
###################################################
gt6  <- subg(g=gi, dat=dt[dt$degenes.t6!=0,], refcol=1)
gt6  <- att.setv(g=gt6, from="Symbol", to="nodeAlias")
gt6  <- att.setv(g=gt6, from="logFC.t6", to="nodeColor", breaks=seq(-2,2,0.4), pal=2)
###################################################
### code chunk number 13: Workflow 1: extract another subgraph and set attributes to RedeR
###################################################
gt12 <- subg(g=gi, dat=dt[dt$degenes.t12!=0,], refcol=1)
gt12 <- att.setv(g=gt12, from="Symbol", to="nodeAlias")
gt12 <- att.setv(g=gt12, from="logFC.t12", to="nodeColor", breaks=seq(-2,2,0.4), pal=2)
###################################################
resetd(rdp)
addGraph(rdp, gt3, gcoord=c(10,25), gscale=20, isNest=TRUE, theme='tm1', zoom=30)
addGraph(rdp, gt6, gcoord=c(20,70), gscale=50, isNest=TRUE, theme='tm1', zoom=30)
addGraph(rdp, gt12, gcoord=c(70,55), gscale=80, isNest=TRUE, theme='tm1', zoom=30)
B <- matrix(0,ncol = 16,nrow = 11)
rownames(B)<- c("inter" , paste("X",1:(nrow(B)-1),sep = ""))
colnames(B)<- c("inter" , paste("Z",1:(ncol(B)-1),sep = ""))
# First, we simulate data as follows:
# The first five features in X, and the first five features in Z, are non-zero.
# And given the non-zero main effects, all possible interactions are involved.
# We call this "high strong heredity"
B_high_SH<- B
B_high_SH[1:6,1:6]<- 1
#View true coefficient matrix
pheatmap::pheatmap(as.matrix(B_high_SH), scale="none",
cluster_rows=FALSE, cluster_cols=FALSE)
B_low_SH<- B_high_SH
B_low_SH[2:6,2:6]<-0
B_low_SH[3:4,3:5]<- 1
#View true coefficient matrix
pheatmap::pheatmap(as.matrix(B_low_SH), scale="none",
cluster_rows=FALSE, cluster_cols=FALSE)
x  <- scale(matrix(rnorm(n * p), n, p))
set.seed(1)
n <- 200; p <- 100
x  <- scale(matrix(rnorm(n * p), n, p))
apply(x, 2, mean) %>% hist
library(magrittr)
set.seed(1)
n <- 200; p <- 100
x  <- scale(matrix(rnorm(n * p), n, p))
apply(x, 2, mean) %>% hist
apply(x, 2, sd) %>% hist
x  <- matrix(rnorm(n * p), n, p)
apply(x, 2, sd) %>% hist
apply(x, 2, mean) %>% hist
setwd("~/git_repositories/casebase")
rm(list=ls())
library(devtools)
library(casebase)
library(data.table)
library(survival)
data("veteran")
table(veteran$status)
names(veteran)[names(veteran) == "status"] <- "event"
veteran$prior <- factor(veteran$prior, levels = c(0, 10))
veteran$celltype <- factor(veteran$celltype,
levels = c('large', 'squamous', 'smallcell', 'adeno'))
veteran$trt <- factor(veteran$trt, levels = c(1, 2))
rm(list=ls())
library(devtools)
sampleCaseBase(veteran)
data = veteran
survival::Surv(subset(data, select=(names(data) == time)),
subset(data, select=(names(data) == event)))
names(data) == "time"
survival::Surv(subset(data, select=(names(data) == "time")),
subset(data, select=(names(data) == event)))
sessionInfo()
sessionInfo(locale = F)
print(sessionInfo(),locale = F)
rm(list=ls())
rm(list=ls())
library(devtools)
library(casebase)
library(data.table)
library(survival)
data("veteran")
veteran$prior <- factor(veteran$prior, levels = c(0, 10))
veteran$celltype <- factor(veteran$celltype,
levels = c('large', 'squamous', 'smallcell', 'adeno'))
veteran$trt <- factor(veteran$trt, levels = c(1, 2))
names(veteran)[names(veteran) == "status"] <- "event"
sampleCaseBase(veteran)
model4 <- fitSmoothHazard(event ~ time + karno + diagtime + age + prior +
celltype + trt, data = veteran, ratio=100, type = "uniform")
vignette(package = "casebase")
vignettes(package = "casebase")
print(sessionInfo(),locale = F)
rm(list=ls())
library(devtools)
library(casebase)
library(data.table)
library(survival)
data("veteran")
veteran$prior <- factor(veteran$prior, levels = c(0, 10))
veteran$celltype <- factor(veteran$celltype,
levels = c('large', 'squamous', 'smallcell', 'adeno'))
veteran$trt <- factor(veteran$trt, levels = c(1, 2))
names(veteran)[names(veteran) == "status"] <- "event"
sampleCaseBase(veteran)
model4 <- fitSmoothHazard(event ~ time + karno + diagtime + age + prior +
celltype + trt, data = veteran, ratio=100, type = "uniform")
rm(list=ls())
library(devtools)
library(casebase)
print(sessionInfo(),locale = F)
detach("package:data.table", unload=TRUE)
library(devtools)
library(casebase)
library(survival)
data("veteran")
veteran$prior <- factor(veteran$prior, levels = c(0, 10))
veteran$celltype <- factor(veteran$celltype,
levels = c('large', 'squamous', 'smallcell', 'adeno'))
veteran$trt <- factor(veteran$trt, levels = c(1, 2))
names(veteran)[names(veteran) == "status"] <- "event"
sampleCaseBase(veteran)
rm(list=ls())
detach("package:devtools", unload=TRUE)
detach("package:casebase", unload=TRUE)
set.seed(1)
nobs <- 5000
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(z=rbinom(nobs, 1, 0.5))
rm(list=ls())
library(data.table)
set.seed(1)
nobs <- 5000
# simulation parameters
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(z=rbinom(nobs, 1, 0.5))
DT
DT <- data.table(z=rbinom(nobs, 1, 0.5))
DT[,`:=` (t_event=rweibull(nobs, a1, b1 * exp(z * c1)^(-1/a1)),
t_comp=rweibull(nobs, a2, b2 * exp(z * c2)^(-1/a2)),
tlim=10)]
DT
DT[,`:=`(e=1 * (t_event < t_comp) + 2 * (t_event >= t_comp),
t=pmin(t_event, t_comp))]
DT
rm(list=ls())
set.seed(1)
nobs <- 5000
# simulation parameters
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(z=rbinom(nobs, 1, 0.5))
DT[,`:=` (event_time = rweibull(nobs, a1, b1 * exp(z * c1)^(-1/a1)),
competing_time = rweibull(nobs, a2, b2 * exp(z * c2)^(-1/a2)),
end_of_study_time = 10)]
DT[,`:=`(event=1 * (event_time < competing_time) + 2 * (event_time >= competing_time),
time=pmin(event_time, competing_time))]
DT[time >= end_of_study_time, event := 0]
DT[time >= end_of_study_time, time:=end_of_study_time]
DT
DT[, time_ordered := order(time)]
DT
rm(list=ls())
set.seed(1)
nobs <- 5000
# simulation parameters
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(z=rbinom(nobs, 1, 0.5))
DT[,`:=` (event_time = rweibull(nobs, a1, b1 * exp(z * c1)^(-1/a1)),
competing_time = rweibull(nobs, a2, b2 * exp(z * c2)^(-1/a2)),
end_of_study_time = 10)]
DT[,`:=`(event=1 * (event_time < competing_time) + 2 * (event_time >= competing_time),
time=pmin(event_time, competing_time))]
DT[time >= end_of_study_time, event := 0]
DT[time >= end_of_study_time, time:=end_of_study_time]
DT
DT[order(time)]
DT[order(time)]
DT[order(time)][["time"]]
DT[ DT[order(time)][["time"]], ycoord:=(nobs:1)]
DT
DT[, order(time)]
DT[ DT[,order(time)], ycoord:=(nobs:1)]
DT
DT[event == 1, yc:=lapply(t, function(i) sample(DT[time >= i & event!=1,ycoord],1))]
DT[event == 1, yc:=lapply(time, function(i) sample(DT[time >= i & event!=1,ycoord],1))]
DT
DT[event == 1, yc := lapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1))]
DT
DT{, table(yc)}
DT[, table(yc)]
DT$yc
DT[event==1]
seq_len(nobs)
DT <- data.table(z=rbinom(nobs, 1, 0.5), ID = seq_len(nobs))
rm(list=ls())
set.seed(1)
nobs <- 5000
# simulation parameters
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(z=rbinom(nobs, 1, 0.5), ID = seq_len(nobs))
DT
rm(list=ls())
set.seed(1)
nobs <- 5000
# simulation parameters
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(ID = seq_len(nobs), z=rbinom(nobs, 1, 0.5))
DT
setkey(DT, ID)
DT[,`:=` (event_time = rweibull(nobs, a1, b1 * exp(z * c1)^(-1/a1)),
competing_time = rweibull(nobs, a2, b2 * exp(z * c2)^(-1/a2)),
end_of_study_time = 10)]
DT[,`:=`(event=1 * (event_time < competing_time) + 2 * (event_time >= competing_time),
time=pmin(event_time, competing_time))]
DT[time >= end_of_study_time, event := 0]
DT[time >= end_of_study_time, time:=end_of_study_time]
DT[, order(time)]
DT[ DT[,order(time)], ycoord:=(nobs:1)]
DT
DT[event == 1, yc := lapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) )]
DT[event==1]
DT[, table(yc)]
DT$yc
DT[event == 1, yc := sapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) )]
DT[event == 1, yc := lapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) )]
DT$yc
DT$yc %>% unlist
library(magrittr)
DT$yc %>% unlist
rm(list=ls())
set.seed(1)
nobs <- 5000
# simulation parameters
a1 <- 1.0
b1 <- 200
a2 <- 1.0
b2 <- 50
c1 <- 0.0
c2 <- 0.0
# e event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# z is a binary covariate
DT <- data.table(ID = seq_len(nobs), z=rbinom(nobs, 1, 0.5))
setkey(DT, ID)
DT[,`:=` (event_time = rweibull(nobs, a1, b1 * exp(z * c1)^(-1/a1)),
competing_time = rweibull(nobs, a2, b2 * exp(z * c2)^(-1/a2)),
end_of_study_time = 10)]
DT[,`:=`(event=1 * (event_time < competing_time) + 2 * (event_time >= competing_time),
time=pmin(event_time, competing_time))]
DT[time >= end_of_study_time, event := 0]
DT[time >= end_of_study_time, time:=end_of_study_time]
# put the e=0 people at the bottom of the population-time plot and people with
# short values of t at the top
DT[ DT[,order(time)], ycoord:=(nobs:1)]
# sample y coordinates for each event, so that we can see the incidence density
# on population-time plots. Sampling from people with e=0 or 2 who have an
# observed time t greater than that of a fixed individual who had the event
DT[event == 1, yc := lapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) )]
str(DT)
DT[, yc:=unlist(yc)]
DT[is.null(yc)]
DT[event == 1, yc := sapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) )]
DT[,table(yc)]
DT[event == 1, yc := lapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) )]
plot(DT$yc)
DT[ , yc := if(event == 1) lapply(time, function(i) sample(DT[time >= i & event != 1,ycoord],1) ) else NA, by = ID]
