censored.indicator = "",
exposure = ""
)
# Make a function that can test to see if the data is consistent.
# This is not called if you have an initialize function defined!
# validity=function(object)
# {
#     if((object@x < 0) || (object@y < 0)) {
#         return("A negative number for one of the coordinates was given.")
#     }
#     return(TRUE)
# }
)
popTime <- setClass(
# Set the name for the class
"popTime",
# Define the slots
slots = c(
data = "data.frame",
time = "character",
event = c("character","numeric"),
censored.indicator = "character",
exposure = "character"),
# Set the default values for the slots. (optional)
prototype=list(
data = data.frame(),
time = "",
event = "",
censored.indicator = "",
exposure = ""
)
# Make a function that can test to see if the data is consistent.
# This is not called if you have an initialize function defined!
# validity=function(object)
# {
#     if((object@x < 0) || (object@y < 0)) {
#         return("A negative number for one of the coordinates was given.")
#     }
#     return(TRUE)
# }
)
remove.packages("casebase")
popTime
popTime
library(casebase)
pacman::p_install_gh('sahirbhatnagar/casebase')
devtools::install_github("hadley/pkgdown")
devtools::install_github("hadley/pkgdown")
library(pkgdown)
pkgdown::build_site
remove.packages("pkgdown")
library(plotly)
p <- plot_ly(economics, x = ~date, y = ~pce)
p
str(p)
str(plotly_build(p)$x$data)
plotly_build(p)
p$preRenderHook()
p$preRenderHook
p$sizingPolicy
p$jsHooks
p$x$cur_data
p$x$visdat
str(plotly_build(p)$x$data)
print(sessionInfo(), locale = FALSE)
print(sessionInfo(), locale = FALSE)
detach(pkgdown)
detach("pkgdown")
devtools::load_all()
pacman::p_install("testhat")
pacman::p_install("testthat")
devtools::load_all()
dev.off()
rm(list=ls())
PATIENT=read.table("data-raw/olli/patient.csv", sep=",", head=T, stringsAsFactors = FALSE)
pt=PATIENT[,c("pid", "rndgroup", "age", "death_days",
"deathcutoff", "finaldeathLC","fup_days","evpdeath","candx_days")]
dim(pt); length(pt$pid)
str(pt)
head(pt)
pt$fuptime=as.numeric(as.character(pt$fup_days))
summary(pt$fuptime/365)
pt$deathtime=as.numeric(as.character(pt$death_days))
summary(pt$deathtime/365)
pt$cancertime=as.numeric(as.character(pt$candx_days))
pt$cancertime=ifelse(pt$cancertime==0, 1, pt$cancertime)
summary(pt$cancertime/365)
head(pt)
pt$pid %>% unique %>% length()
nrow(pt)
head(pt)
DT_pt <- as.data.table(pt)
library(magrittr)
library(casebase)
library(data.table)
devtools::load_all()
library(magrittr)
library(data.table)
devtools::load_all()
dev.off()
rm(list=ls())
PATIENT=read.table("data-raw/olli/patient.csv", sep=",", head=T, stringsAsFactors = FALSE)
pt=PATIENT[,c("pid", "rndgroup", "age", "death_days",
"deathcutoff", "finaldeathLC","fup_days","evpdeath","candx_days")]
dim(pt); length(pt$pid)
str(pt)
head(pt)
pt$fuptime=as.numeric(as.character(pt$fup_days))
summary(pt$fuptime/365)
pt$deathtime=as.numeric(as.character(pt$death_days))
summary(pt$deathtime/365)
pt$cancertime=as.numeric(as.character(pt$candx_days))
pt$cancertime=ifelse(pt$cancertime==0, 1, pt$cancertime)
summary(pt$cancertime/365)
head(pt)
pt$pid %>% unique %>% length()
nrow(pt)
head(pt)
DT_pt <- as.data.table(pt)
setkey(DT_pt, "pid")
DT_pt[, event:= 1 * (!is.na(deathtime) & finaldeathLC %in% c('1')) +
2 * (!is.na(deathtime) & finaldeathLC %in% c('0','M')), by = pid]
DT_pt[, table(event, rndgroup)]
DT_pt[, rndgroup:=factor(rndgroup, levels = 1:2, labels = c("X-ray arm","CT arm"))]
popTimeObj <- popTime(DT_pt, time = "fuptime", event = "event", exposure = "rndgroup")
plot(popTimeObj)
devtools::load_all()
popTimeObj <- popTime(DT_pt, time = "fuptime", event = "event", exposure = "rndgroup")
plot(popTimeObj)
PATIENT=read.table("data-raw/olli/patient.csv", sep=",", head=T, stringsAsFactors = FALSE)
pt=PATIENT[,c("pid", "rndgroup", "age", "death_days",
"deathcutoff", "finaldeathLC","fup_days","evpdeath","candx_days")]
dim(pt); length(pt$pid)
str(pt)
head(pt)
pt$fuptime=as.numeric(as.character(pt$fup_days))
summary(pt$fuptime/365)
pt$deathtime=as.numeric(as.character(pt$death_days))
summary(pt$deathtime/365)
pt$cancertime=as.numeric(as.character(pt$candx_days))
pt$cancertime=ifelse(pt$cancertime==0, 1, pt$cancertime)
summary(pt$cancertime/365)
head(pt)
pt$pid %>% unique %>% length()
nrow(pt)
head(pt)
DT_pt <- as.data.table(pt)
setkey(DT_pt, "pid")
DT_pt[, event:= 1 * (!is.na(deathtime) & finaldeathLC %in% c('1')) +
2 * (!is.na(deathtime) & finaldeathLC %in% c('0','M')), by = pid]
DT_pt[, table(event, rndgroup)]
DT_pt[, rndgroup:=factor(rndgroup, levels = 1:2, labels = c("X-ray arm","CT arm"))]
popTimeObj <- popTime(DT_pt, time = "fuptime", event = "event", exposure = "rndgroup")
plot(popTimeObj)
popTimeObj$data
popTimeObj$data[, max(ycoord)]
x <- popTime(DT_pt, time = "fuptime", event = "event", exposure = "rndgroup")
ycoord <- yc <- `event status` <- event <- NULL
p1 <- ggplot(x$data, aes(x = 0, xend = time, y = ycoord, yend = ycoord))
p1 <- ggplot2::ggplot(x$data, aes(x = 0, xend = time, y = ycoord, yend = ycoord))
library(ggplot2)
p1 <- ggplot(x$data, aes(x = 0, xend = time, y = ycoord, yend = ycoord))
p1
p2 <- p1 +
geom_segment(size = line.width, colour = line.colour) +
xlab(xlab) +
ylab(ylab) +
theme_bw() +
scale_y_continuous(limits = c(0,roundUp(x$data[, max(ycoord)])))
devtools::load_all()
DT <- read.csv(system.file("extdata", "bmtcrr.csv", package = "casebase"))
head(DT)
DT <- read.csv(system.file("extdata", "bmtcrr.csv", package = "casebase"))
popTimeData <- popTime(data = DT, time = "ftime", exposure = "D")
plot(popTimeData)
roundUp
devtools::load_all()
DT <- read.csv(system.file("extdata", "bmtcrr.csv", package = "casebase"))
popTimeData <- popTime(data = DT, time = "ftime", exposure = "D")
plot(popTimeData)
rm(list=ls())
# setwd("~/Dropbox/work/compete/data")
PATIENT=read.table("data-raw/olli/patient.csv", sep=",", head=T, stringsAsFactors = FALSE)
pt=PATIENT[,c("pid", "rndgroup", "age", "death_days",
"deathcutoff", "finaldeathLC","fup_days","evpdeath","candx_days")]
dim(pt); length(pt$pid)
str(pt)
head(pt)
pt$fuptime=as.numeric(as.character(pt$fup_days))
summary(pt$fuptime/365)
pt$deathtime=as.numeric(as.character(pt$death_days))
summary(pt$deathtime/365)
pt$cancertime=as.numeric(as.character(pt$candx_days))
pt$cancertime=ifelse(pt$cancertime==0, 1, pt$cancertime)
summary(pt$cancertime/365)
head(pt)
pt$pid %>% unique %>% length()
nrow(pt)
head(pt)
DT_pt <- as.data.table(pt)
setkey(DT_pt, "pid")
DT_pt[, event:= 1 * (!is.na(deathtime) & finaldeathLC %in% c('1')) +
2 * (!is.na(deathtime) & finaldeathLC %in% c('0','M')), by = pid]
DT_pt[, table(event, rndgroup)]
DT_pt[, rndgroup:=factor(rndgroup, levels = 1:2, labels = c("X-ray arm","CT arm"))]
popTimeObj <- popTime(DT_pt, time = "fuptime", event = "event", exposure = "rndgroup")
plot(popTimeObj)
popTimeObj <- popTime(DT_pt, time = "fuptime", event = "event", exposure = "rndgroup")
plot(popTimeObj)
p5 <- plot(popTimeObj)
str(p5)
p5  + scale_y_continuous(breaks=NULL)
popTimeObj$data$ycoord
popTimeObj$data$ycoord %>% max
p5  + scale_y_continuous(limits = c(0, max(popTimeObj$data$ycoord)))
p5  + scale_y_continuous(breaks = seq(0, max(popTimeObj$data$ycoord), 5000))
DT <- read.csv(system.file("extdata", "bmtcrr.csv", package = "casebase"))
popTimeData <- popTime(data = DT, time = "ftime", exposure = "D")
plot(popTimeData)
p < -plot(popTimeData)
p <- plot(popTimeData)
p + scale_y_continuous(breaks = seq(0, max(popTimeData$data$ycoord), 10))
class(p)
pacman::p_install_gh('sahirbhatnagar/casebase')
rm(list=ls())
ds <- read.csv("data-raw/hanley/ERSPCindividualData.csv")
str(ds); head(ds)
rm(list=ls())
ds <- read.csv("data-raw/hanley/ERSPCindividualData.csv")
ERSPC <- read.csv("data-raw/hanley/ERSPCindividualData.csv")
devtools::use_data(ERSPC, overwrite = TRUE)
head(ds)
load(file ="data/ERSPC.rda")
library(devtools)
document()
document()
help(ERSPC)
document()
help(ERSPC)
document()
help(ERSPC)
help(manhattanly)
??manhattanly
library(manhttanly)
library(manhattanly)
pacman::p_install_gh('sahirbhatnagar/manhattanly')
help(manhattanly)
??manhttanly
document()
manhattanly::manhattanly
manhattanly:::manhattanly.default
library(manhattanly)
manhattanly(HapMap)
NorthAmerican <- function(eatsBreakfast=TRUE,myFavorite="cereal")
{
me <- list(
hasBreakfast = eatsBreakfast,
favoriteBreakfast = myFavorite
)
## Set the name for the class
class(me) <- append(class(me),"NorthAmerican")
return(me)
}
NorthAmerican
NorthAmerican()
setHasBreakfast <- function(elObjeto, newValue)
{
UseMethod("setHasBreakfast",elObjeto)
print("Note this is not executed!")
}
setHasBreakfast()
setHasBreakfast <- function(elObjeto, newValue) {
UseMethod("setHasBreakfast",elObjeto)
print("Note this is not executed!")
}
setHasBreakfast()
setHasBreakfast.default <- function(elObjeto, newValue)
{
print("You screwed up. I do not know how to handle this object.")
return(elObjeto)
}
setHasBreakfast()
NorthAmerican <- function(eatsBreakfast=TRUE,myFavorite="cereal")
{
me <- list(
hasBreakfast = eatsBreakfast,
favoriteBreakfast = myFavorite
)
## Set the name for the class
class(me) <- append(class(me),"NorthAmerican")
return(me)
}
NorthAmerican()
setHasBreakfast <- function(elObjeto, newValue) {
UseMethod("setHasBreakfast",elObjeto)
print("Note this is not executed!")
}
setHasBreakfast.default <- function(elObjeto, newValue)
{
print("You screwed up. I do not know how to handle this object.")
return(elObjeto)
}
setHasBreakfast.NorthAmerican <- function(elObjeto, newValue)
{
elObjeto$hasBreakfast <- newValue
return(elObjeto)
}
getHasBreakfast <- function(elObjeto)
{
UseMethod("getHasBreakfast",elObjeto)
print("Note this is not executed!")
}
getHasBreakfast.default <- function(elObjeto)
{
print("You screwed up. I do not know how to handle this object.")
return(NULL)
}
getHasBreakfast.NorthAmerican <- function(elObjeto)
{
return(elObjeto$hasBreakfast)
}
setFavoriteBreakfast <- function(elObjeto, newValue)
{
UseMethod("setFavoriteBreakfast",elObjeto)
print("Note this is not executed!")
}
setFavoriteBreakfast.default <- function(elObjeto, newValue)
{
print("You screwed up. I do not know how to handle this object.")
return(elObjeto)
}
setFavoriteBreakfast.NorthAmerican <- function(elObjeto, newValue)
{
elObjeto$favoriteBreakfast <- newValue
return(elObjeto)
}
getFavoriteBreakfast <- function(elObjeto)
{
UseMethod("getFavoriteBreakfast",elObjeto)
}
getFavoriteBreakfast.default <- function(elObjeto)
{
print("You screwed up. I do not know how to handle this object.")
return(NULL)
}
getFavoriteBreakfast.NorthAmerican <- function(elObjeto)
{
return(elObjeto$favoriteBreakfast)
}
bubba <- NorthAmerican()
bubba <- setHasBreakfast(bubba,FALSE)
bubba <- setFavoriteBreakfast(bubba,"Pork Belly")
getHasBreakfast(bubba)
getFavoriteBreakfast(bubba)
#####################################
## Now define the derived classes
Mexican <- function(eatsBreakfast=TRUE,myFavorite="los huevos")
{
me <- NorthAmerican(eatsBreakfast,myFavorite)
## Add the name for the class
class(me) <- append(class(me),"Mexican")
return(me)
}
USAsian <- function(eatsBreakfast=TRUE,myFavorite="pork belly")
{
me <- NorthAmerican(eatsBreakfast,myFavorite)
## Add the name for the class
class(me) <- append(class(me),"USAsian")
return(me)
}
Canadian <- function(eatsBreakfast=TRUE,myFavorite="back bacon")
{
me <- NorthAmerican(eatsBreakfast,myFavorite)
## Add the name for the class
class(me) <- append(class(me),"Canadian")
return(me)
}
Anglophone <- function(eatsBreakfast=TRUE,myFavorite="pancakes")
{
me <- Canadian(eatsBreakfast,myFavorite)
## Add the name for the class
class(me) <- append(class(me),"Anglophone")
return(me)
}
Francophone <- function(eatsBreakfast=TRUE,myFavorite="crepes")
{
me <- Canadian(eatsBreakfast,myFavorite)
## Add the name for the class
class(me) <- append(class(me),"Francophone")
return(me)
}
makeBreakfast <- function(theObject)
{
print("Calling the base makeBreakfast function")
UseMethod("makeBreakfast",theObject)
}
makeBreakfast.default <- function(theObject)
{
print(noquote(paste("Well, this is awkward. Just make",
getFavoriteBreakfast(theObject))))
return(theObject)
}
makeBreakfast.Mexican <- function(theObject)
{
print(noquote(paste("Estoy cocinando",
getFavoriteBreakfast(theObject))))
NextMethod("makeBreakfast",theObject)
return(theObject)
}
makeBreakfast.USAsian <- function(theObject)
{
print(noquote(paste("Leave me alone I am making",
getFavoriteBreakfast(theObject))))
NextMethod("makeBreakfast",theObject)
return(theObject)
}
makeBreakfast.Canadian <- function(theObject)
{
print(noquote(paste("Good morning, how would you like",
getFavoriteBreakfast(theObject))))
NextMethod("makeBreakfast",theObject)
return(theObject)
}
makeBreakfast.Anglophone <- function(theObject)
{
print(noquote(paste("I hope it is okay that I am making",
getFavoriteBreakfast(theObject))))
NextMethod("makeBreakfast",theObject)
return(theObject)
}
makeBreakfast.Francophone <- function(theObject)
{
print(noquote(paste("Je cuisine",
getFavoriteBreakfast(theObject))))
NextMethod("makeBreakfast",theObject)
return(theObject)
}
francois <- Francophone()
francois
francois <- makeBreakfast(francois)
Francophone()
manhattanly()
manhattanly
document()
rm(list=ls())
ERSPC <- read.csv("data-raw/hanley/ERSPCindividualData.csv")
rm(list=ls())
devtools::load_all()
data("ERSPC")
ds <- ERSPC
KM=survfit(Surv(Follow.Up.Time,DeadOfPrCa)~ScrArm,data=ds)
str(KM)
library(survival)
library(casebase)
library(data.table)
ds <- ERSPC
ds <- ERSPC
KM <- survfit(Surv(Follow.Up.Time,DeadOfPrCa) ~ ScrArm, data = ds)
str(KM)
ds <- ERSPC
KM <- survfit(Surv(Follow.Up.Time,DeadOfPrCa) ~ ScrArm, data = ds)
str(KM)
par(mfrow=c(1,1),mar = c(5,5,0.1,0.1))
plot(KM$time[    1: 1501], 1-KM$surv[   1:1501], type="s", col="red" ,
ylab = "Risk", xlab="Years since Randomization")
lines(KM$time[1502: 2923], 1-KM$surv[1502: 2923], type="s", col="green" )
document()
library(magrittr)
library(manhattanly)
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "x Axis",
titlefont = f
)
y <- list(
title = "y Axis",
titlefont = f
)
manhattanly(HapMap) %>% layout(xaxis = x, yaxis = y)
manhattanly(HapMap)
p <- manhattanly(HapMap)
p %>% layout(xaxis = x, yaxis = y)
p %<>% layout(xaxis = x, yaxis = y)
showNonASCIIfile("man/ERSPC.Rd")
tools::showNonASCIIfile("man/ERSPC.Rd")
tools::showNonASCIIfile("man/ERSPC.Rd")
tools::showNonASCIIfile("man/ERSPC.Rd")
document()
tools::showNonASCIIfile("man/ERSPC.Rd")
document()
tools::showNonASCIIfile("man/ERSPC.Rd")
popTime <- function(x) UseMethod("popTime")
popTime()
pacman::p_load_current_gh('paul-buerkner/brms')
pacman::p_load("brms")
dotR <- file.path(Sys.getenv("HOME"), ".R")
dotR
file.exists(dotR)
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
pacman::p_load("brms")
pacman::p_load("RWiener")
